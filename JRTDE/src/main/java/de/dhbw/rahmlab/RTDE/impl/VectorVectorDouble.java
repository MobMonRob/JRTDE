/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.RTDE.impl;

public class VectorVectorDouble extends java.util.AbstractList<VectorDouble> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VectorVectorDouble(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VectorVectorDouble obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTDE_MODULEJNI.delete_VectorVectorDouble(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public VectorVectorDouble(VectorDouble[] initialElements) {
    this();
    reserve(initialElements.length);

    for (VectorDouble element : initialElements) {
      add(element);
    }
  }

  public VectorVectorDouble(Iterable<VectorDouble> initialElements) {
    this();
    for (VectorDouble element : initialElements) {
      add(element);
    }
  }

  public VectorDouble get(int index) {
    return doGet(index);
  }

  public VectorDouble set(int index, VectorDouble e) {
    return doSet(index, e);
  }

  public boolean add(VectorDouble e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, VectorDouble e) {
    modCount++;
    doAdd(index, e);
  }

  public VectorDouble remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public VectorVectorDouble() {
    this(RTDE_MODULEJNI.new_VectorVectorDouble__SWIG_0(), true);
  }

  public VectorVectorDouble(VectorVectorDouble other) {
    this(RTDE_MODULEJNI.new_VectorVectorDouble__SWIG_1(VectorVectorDouble.getCPtr(other), other), true);
  }

  public long capacity() {
    return RTDE_MODULEJNI.VectorVectorDouble_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    RTDE_MODULEJNI.VectorVectorDouble_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return RTDE_MODULEJNI.VectorVectorDouble_isEmpty(swigCPtr, this);
  }

  public void clear() {
    RTDE_MODULEJNI.VectorVectorDouble_clear(swigCPtr, this);
  }

  public VectorVectorDouble(int count, VectorDouble value) {
    this(RTDE_MODULEJNI.new_VectorVectorDouble__SWIG_2(count, VectorDouble.getCPtr(value), value), true);
  }

  private int doSize() {
    return RTDE_MODULEJNI.VectorVectorDouble_doSize(swigCPtr, this);
  }

  private void doAdd(VectorDouble x) {
    RTDE_MODULEJNI.VectorVectorDouble_doAdd__SWIG_0(swigCPtr, this, VectorDouble.getCPtr(x), x);
  }

  private void doAdd(int index, VectorDouble x) {
    RTDE_MODULEJNI.VectorVectorDouble_doAdd__SWIG_1(swigCPtr, this, index, VectorDouble.getCPtr(x), x);
  }

  private VectorDouble doRemove(int index) {
    return new VectorDouble(RTDE_MODULEJNI.VectorVectorDouble_doRemove(swigCPtr, this, index), true);
  }

  private VectorDouble doGet(int index) {
    return new VectorDouble(RTDE_MODULEJNI.VectorVectorDouble_doGet(swigCPtr, this, index), false);
  }

  private VectorDouble doSet(int index, VectorDouble val) {
    return new VectorDouble(RTDE_MODULEJNI.VectorVectorDouble_doSet(swigCPtr, this, index, VectorDouble.getCPtr(val), val), true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    RTDE_MODULEJNI.VectorVectorDouble_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
