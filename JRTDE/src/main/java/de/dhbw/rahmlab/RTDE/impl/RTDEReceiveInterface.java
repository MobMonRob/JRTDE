/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.RTDE.impl;

public class RTDEReceiveInterface {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RTDEReceiveInterface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RTDEReceiveInterface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTDE_MODULEJNI.delete_RTDEReceiveInterface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RTDEReceiveInterface(String hostname, VectorString variables, int port, boolean verbose) {
    this(RTDE_MODULEJNI.new_RTDEReceiveInterface__SWIG_0(hostname, VectorString.getCPtr(variables), variables, port, verbose), true);
  }

  public RTDEReceiveInterface(String hostname, VectorString variables, int port) {
    this(RTDE_MODULEJNI.new_RTDEReceiveInterface__SWIG_1(hostname, VectorString.getCPtr(variables), variables, port), true);
  }

  public RTDEReceiveInterface(String hostname, VectorString variables) {
    this(RTDE_MODULEJNI.new_RTDEReceiveInterface__SWIG_2(hostname, VectorString.getCPtr(variables), variables), true);
  }

  public RTDEReceiveInterface(String hostname) {
    this(RTDE_MODULEJNI.new_RTDEReceiveInterface__SWIG_3(hostname), true);
  }

  public void disconnect() {
    RTDE_MODULEJNI.RTDEReceiveInterface_disconnect(swigCPtr, this);
  }

  public boolean reconnect() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_reconnect(swigCPtr, this);
  }

  public boolean isConnected() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_isConnected(swigCPtr, this);
  }

  public double getTimestamp() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getTimestamp(swigCPtr, this);
  }

  public VectorDouble getTargetQ() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetQ(swigCPtr, this), true);
  }

  public VectorDouble getTargetQd() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetQd(swigCPtr, this), true);
  }

  public VectorDouble getTargetQdd() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetQdd(swigCPtr, this), true);
  }

  public VectorDouble getTargetCurrent() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetCurrent(swigCPtr, this), true);
  }

  public VectorDouble getTargetMoment() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetMoment(swigCPtr, this), true);
  }

  public VectorDouble getActualQ() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualQ(swigCPtr, this), true);
  }

  public VectorDouble getActualQd() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualQd(swigCPtr, this), true);
  }

  public VectorDouble getActualCurrent() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualCurrent(swigCPtr, this), true);
  }

  public VectorDouble getJointControlOutput() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getJointControlOutput(swigCPtr, this), true);
  }

  public VectorDouble getActualTCPPose() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualTCPPose(swigCPtr, this), true);
  }

  public VectorDouble getActualTCPSpeed() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualTCPSpeed(swigCPtr, this), true);
  }

  public VectorDouble getActualTCPForce() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualTCPForce(swigCPtr, this), true);
  }

  public VectorDouble getTargetTCPPose() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetTCPPose(swigCPtr, this), true);
  }

  public VectorDouble getTargetTCPSpeed() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getTargetTCPSpeed(swigCPtr, this), true);
  }

  public java.math.BigInteger getActualDigitalInputBits() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualDigitalInputBits(swigCPtr, this);
  }

  public VectorDouble getJointTemperatures() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getJointTemperatures(swigCPtr, this), true);
  }

  public double getActualExecutionTime() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualExecutionTime(swigCPtr, this);
  }

  public int getRobotMode() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getRobotMode(swigCPtr, this);
  }

  public long getRobotStatus() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getRobotStatus(swigCPtr, this);
  }

  public VectorInt getJointMode() {
    return new VectorInt(RTDE_MODULEJNI.RTDEReceiveInterface_getJointMode(swigCPtr, this), true);
  }

  public int getSafetyMode() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getSafetyMode(swigCPtr, this);
  }

  public long getSafetyStatusBits() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getSafetyStatusBits(swigCPtr, this);
  }

  public VectorDouble getActualToolAccelerometer() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualToolAccelerometer(swigCPtr, this), true);
  }

  public double getSpeedScaling() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getSpeedScaling(swigCPtr, this);
  }

  public double getTargetSpeedFraction() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getTargetSpeedFraction(swigCPtr, this);
  }

  public double getActualMomentum() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualMomentum(swigCPtr, this);
  }

  public double getActualMainVoltage() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualMainVoltage(swigCPtr, this);
  }

  public double getActualRobotVoltage() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualRobotVoltage(swigCPtr, this);
  }

  public double getActualRobotCurrent() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualRobotCurrent(swigCPtr, this);
  }

  public VectorDouble getActualJointVoltage() {
    return new VectorDouble(RTDE_MODULEJNI.RTDEReceiveInterface_getActualJointVoltage(swigCPtr, this), true);
  }

  public java.math.BigInteger getActualDigitalOutputBits() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getActualDigitalOutputBits(swigCPtr, this);
  }

  public boolean getDigitalOutState(short output_id) {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getDigitalOutState(swigCPtr, this, output_id);
  }

  public long getRuntimeState() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getRuntimeState(swigCPtr, this);
  }

  public double getStandardAnalogInput0() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getStandardAnalogInput0(swigCPtr, this);
  }

  public double getStandardAnalogInput1() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getStandardAnalogInput1(swigCPtr, this);
  }

  public double getStandardAnalogOutput0() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getStandardAnalogOutput0(swigCPtr, this);
  }

  public double getStandardAnalogOutput1() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_getStandardAnalogOutput1(swigCPtr, this);
  }

  public boolean isProtectiveStopped() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_isProtectiveStopped(swigCPtr, this);
  }

  public boolean isEmergencyStopped() {
    return RTDE_MODULEJNI.RTDEReceiveInterface_isEmergencyStopped(swigCPtr, this);
  }

  public void receiveCallback() {
    RTDE_MODULEJNI.RTDEReceiveInterface_receiveCallback(swigCPtr, this);
  }

  public final static class SafetyStatus {
    public final static RTDEReceiveInterface.SafetyStatus IS_NORMAL_MODE = new RTDEReceiveInterface.SafetyStatus("IS_NORMAL_MODE", RTDE_MODULEJNI.RTDEReceiveInterface_IS_NORMAL_MODE_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_REDUCED_MODE = new RTDEReceiveInterface.SafetyStatus("IS_REDUCED_MODE", RTDE_MODULEJNI.RTDEReceiveInterface_IS_REDUCED_MODE_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_PROTECTIVE_STOPPED = new RTDEReceiveInterface.SafetyStatus("IS_PROTECTIVE_STOPPED", RTDE_MODULEJNI.RTDEReceiveInterface_IS_PROTECTIVE_STOPPED_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_RECOVERY_MODE = new RTDEReceiveInterface.SafetyStatus("IS_RECOVERY_MODE", RTDE_MODULEJNI.RTDEReceiveInterface_IS_RECOVERY_MODE_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_SAFEGUARD_STOPPED = new RTDEReceiveInterface.SafetyStatus("IS_SAFEGUARD_STOPPED", RTDE_MODULEJNI.RTDEReceiveInterface_IS_SAFEGUARD_STOPPED_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_SYSTEM_EMERGENCY_STOPPED = new RTDEReceiveInterface.SafetyStatus("IS_SYSTEM_EMERGENCY_STOPPED", RTDE_MODULEJNI.RTDEReceiveInterface_IS_SYSTEM_EMERGENCY_STOPPED_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_ROBOT_EMERGENCY_STOPPED = new RTDEReceiveInterface.SafetyStatus("IS_ROBOT_EMERGENCY_STOPPED", RTDE_MODULEJNI.RTDEReceiveInterface_IS_ROBOT_EMERGENCY_STOPPED_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_EMERGENCY_STOPPED = new RTDEReceiveInterface.SafetyStatus("IS_EMERGENCY_STOPPED", RTDE_MODULEJNI.RTDEReceiveInterface_IS_EMERGENCY_STOPPED_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_VIOLATION = new RTDEReceiveInterface.SafetyStatus("IS_VIOLATION", RTDE_MODULEJNI.RTDEReceiveInterface_IS_VIOLATION_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_FAULT = new RTDEReceiveInterface.SafetyStatus("IS_FAULT", RTDE_MODULEJNI.RTDEReceiveInterface_IS_FAULT_get());
    public final static RTDEReceiveInterface.SafetyStatus IS_STOPPED_DUE_TO_SAFETY = new RTDEReceiveInterface.SafetyStatus("IS_STOPPED_DUE_TO_SAFETY", RTDE_MODULEJNI.RTDEReceiveInterface_IS_STOPPED_DUE_TO_SAFETY_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SafetyStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SafetyStatus.class + " with value " + swigValue);
    }

    private SafetyStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SafetyStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SafetyStatus(String swigName, SafetyStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SafetyStatus[] swigValues = { IS_NORMAL_MODE, IS_REDUCED_MODE, IS_PROTECTIVE_STOPPED, IS_RECOVERY_MODE, IS_SAFEGUARD_STOPPED, IS_SYSTEM_EMERGENCY_STOPPED, IS_ROBOT_EMERGENCY_STOPPED, IS_EMERGENCY_STOPPED, IS_VIOLATION, IS_FAULT, IS_STOPPED_DUE_TO_SAFETY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
