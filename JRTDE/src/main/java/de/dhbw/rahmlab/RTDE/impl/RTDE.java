/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.RTDE.impl;

public class RTDE {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RTDE(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RTDE obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RTDE_MODULEJNI.delete_RTDE(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RTDE(String hostname, int port, boolean verbose) {
    this(RTDE_MODULEJNI.new_RTDE__SWIG_0(hostname, port, verbose), true);
  }

  public RTDE(String hostname, int port) {
    this(RTDE_MODULEJNI.new_RTDE__SWIG_1(hostname, port), true);
  }

  public RTDE(String hostname) {
    this(RTDE_MODULEJNI.new_RTDE__SWIG_2(hostname), true);
  }

  static public class RobotCommand {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected RobotCommand(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(RobotCommand obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTDE_MODULEJNI.delete_RTDE_RobotCommand(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public RobotCommand() {
      this(RTDE_MODULEJNI.new_RTDE_RobotCommand(), true);
    }
  
    public void setType_(RTDE.RobotCommand.Type value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_type__set(swigCPtr, this, value.swigValue());
    }
  
    public RTDE.RobotCommand.Type getType_() {
      return RTDE.RobotCommand.Type.swigToEnum(RTDE_MODULEJNI.RTDE_RobotCommand_type__get(swigCPtr, this));
    }
  
    public void setRecipe_id_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_recipe_id__set(swigCPtr, this, value);
    }
  
    public short getRecipe_id_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_recipe_id__get(swigCPtr, this);
    }
  
    public void setVal_(VectorDouble value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_val__set(swigCPtr, this, VectorDouble.getCPtr(value), value);
    }
  
    public VectorDouble getVal_() {
      long cPtr = RTDE_MODULEJNI.RTDE_RobotCommand_val__get(swigCPtr, this);
      return (cPtr == 0) ? null : new VectorDouble(cPtr, false);
    }
  
    public void setSelection_vector_(VectorInt value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_selection_vector__set(swigCPtr, this, VectorInt.getCPtr(value), value);
    }
  
    public VectorInt getSelection_vector_() {
      long cPtr = RTDE_MODULEJNI.RTDE_RobotCommand_selection_vector__get(swigCPtr, this);
      return (cPtr == 0) ? null : new VectorInt(cPtr, false);
    }
  
    public void setMovec_mode_(int value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_movec_mode__set(swigCPtr, this, value);
    }
  
    public int getMovec_mode_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_movec_mode__get(swigCPtr, this);
    }
  
    public void setForce_mode_type_(int value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_force_mode_type__set(swigCPtr, this, value);
    }
  
    public int getForce_mode_type_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_force_mode_type__get(swigCPtr, this);
    }
  
    public void setStd_digital_out_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_digital_out__set(swigCPtr, this, value);
    }
  
    public short getStd_digital_out_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_digital_out__get(swigCPtr, this);
    }
  
    public void setStd_digital_out_mask_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_digital_out_mask__set(swigCPtr, this, value);
    }
  
    public short getStd_digital_out_mask_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_digital_out_mask__get(swigCPtr, this);
    }
  
    public void setStd_tool_out_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_tool_out__set(swigCPtr, this, value);
    }
  
    public short getStd_tool_out_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_tool_out__get(swigCPtr, this);
    }
  
    public void setStd_tool_out_mask_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_tool_out_mask__set(swigCPtr, this, value);
    }
  
    public short getStd_tool_out_mask_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_tool_out_mask__get(swigCPtr, this);
    }
  
    public void setStd_analog_output_mask_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_mask__set(swigCPtr, this, value);
    }
  
    public short getStd_analog_output_mask_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_mask__get(swigCPtr, this);
    }
  
    public void setStd_analog_output_type_(short value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_type__set(swigCPtr, this, value);
    }
  
    public short getStd_analog_output_type_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_type__get(swigCPtr, this);
    }
  
    public void setStd_analog_output_0_(double value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_0__set(swigCPtr, this, value);
    }
  
    public double getStd_analog_output_0_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_0__get(swigCPtr, this);
    }
  
    public void setStd_analog_output_1_(double value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_1__set(swigCPtr, this, value);
    }
  
    public double getStd_analog_output_1_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_std_analog_output_1__get(swigCPtr, this);
    }
  
    public void setSpeed_slider_mask_(int value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_speed_slider_mask__set(swigCPtr, this, value);
    }
  
    public int getSpeed_slider_mask_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_speed_slider_mask__get(swigCPtr, this);
    }
  
    public void setSpeed_slider_fraction_(double value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_speed_slider_fraction__set(swigCPtr, this, value);
    }
  
    public double getSpeed_slider_fraction_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_speed_slider_fraction__get(swigCPtr, this);
    }
  
    public void setSteps_(long value) {
      RTDE_MODULEJNI.RTDE_RobotCommand_steps__set(swigCPtr, this, value);
    }
  
    public long getSteps_() {
      return RTDE_MODULEJNI.RTDE_RobotCommand_steps__get(swigCPtr, this);
    }
  
    public final static class Type {
      public final static RTDE.RobotCommand.Type NO_CMD = new RTDE.RobotCommand.Type("NO_CMD", RTDE_MODULEJNI.RTDE_RobotCommand_NO_CMD_get());
      public final static RTDE.RobotCommand.Type MOVEJ = new RTDE.RobotCommand.Type("MOVEJ", RTDE_MODULEJNI.RTDE_RobotCommand_MOVEJ_get());
      public final static RTDE.RobotCommand.Type MOVEJ_IK = new RTDE.RobotCommand.Type("MOVEJ_IK", RTDE_MODULEJNI.RTDE_RobotCommand_MOVEJ_IK_get());
      public final static RTDE.RobotCommand.Type MOVEL = new RTDE.RobotCommand.Type("MOVEL", RTDE_MODULEJNI.RTDE_RobotCommand_MOVEL_get());
      public final static RTDE.RobotCommand.Type MOVEL_FK = new RTDE.RobotCommand.Type("MOVEL_FK", RTDE_MODULEJNI.RTDE_RobotCommand_MOVEL_FK_get());
      public final static RTDE.RobotCommand.Type MOVEC = new RTDE.RobotCommand.Type("MOVEC", RTDE_MODULEJNI.RTDE_RobotCommand_MOVEC_get());
      public final static RTDE.RobotCommand.Type FORCE_MODE = new RTDE.RobotCommand.Type("FORCE_MODE", RTDE_MODULEJNI.RTDE_RobotCommand_FORCE_MODE_get());
      public final static RTDE.RobotCommand.Type FORCE_MODE_STOP = new RTDE.RobotCommand.Type("FORCE_MODE_STOP", RTDE_MODULEJNI.RTDE_RobotCommand_FORCE_MODE_STOP_get());
      public final static RTDE.RobotCommand.Type ZERO_FT_SENSOR = new RTDE.RobotCommand.Type("ZERO_FT_SENSOR", RTDE_MODULEJNI.RTDE_RobotCommand_ZERO_FT_SENSOR_get());
      public final static RTDE.RobotCommand.Type SPEEDJ = new RTDE.RobotCommand.Type("SPEEDJ", RTDE_MODULEJNI.RTDE_RobotCommand_SPEEDJ_get());
      public final static RTDE.RobotCommand.Type SPEEDL = new RTDE.RobotCommand.Type("SPEEDL", RTDE_MODULEJNI.RTDE_RobotCommand_SPEEDL_get());
      public final static RTDE.RobotCommand.Type SERVOJ = new RTDE.RobotCommand.Type("SERVOJ", RTDE_MODULEJNI.RTDE_RobotCommand_SERVOJ_get());
      public final static RTDE.RobotCommand.Type SERVOC = new RTDE.RobotCommand.Type("SERVOC", RTDE_MODULEJNI.RTDE_RobotCommand_SERVOC_get());
      public final static RTDE.RobotCommand.Type SET_STD_DIGITAL_OUT = new RTDE.RobotCommand.Type("SET_STD_DIGITAL_OUT", RTDE_MODULEJNI.RTDE_RobotCommand_SET_STD_DIGITAL_OUT_get());
      public final static RTDE.RobotCommand.Type SET_TOOL_DIGITAL_OUT = new RTDE.RobotCommand.Type("SET_TOOL_DIGITAL_OUT", RTDE_MODULEJNI.RTDE_RobotCommand_SET_TOOL_DIGITAL_OUT_get());
      public final static RTDE.RobotCommand.Type SPEED_STOP = new RTDE.RobotCommand.Type("SPEED_STOP", RTDE_MODULEJNI.RTDE_RobotCommand_SPEED_STOP_get());
      public final static RTDE.RobotCommand.Type SERVO_STOP = new RTDE.RobotCommand.Type("SERVO_STOP", RTDE_MODULEJNI.RTDE_RobotCommand_SERVO_STOP_get());
      public final static RTDE.RobotCommand.Type SET_PAYLOAD = new RTDE.RobotCommand.Type("SET_PAYLOAD", RTDE_MODULEJNI.RTDE_RobotCommand_SET_PAYLOAD_get());
      public final static RTDE.RobotCommand.Type TEACH_MODE = new RTDE.RobotCommand.Type("TEACH_MODE", RTDE_MODULEJNI.RTDE_RobotCommand_TEACH_MODE_get());
      public final static RTDE.RobotCommand.Type END_TEACH_MODE = new RTDE.RobotCommand.Type("END_TEACH_MODE", RTDE_MODULEJNI.RTDE_RobotCommand_END_TEACH_MODE_get());
      public final static RTDE.RobotCommand.Type FORCE_MODE_SET_DAMPING = new RTDE.RobotCommand.Type("FORCE_MODE_SET_DAMPING", RTDE_MODULEJNI.RTDE_RobotCommand_FORCE_MODE_SET_DAMPING_get());
      public final static RTDE.RobotCommand.Type FORCE_MODE_SET_GAIN_SCALING = new RTDE.RobotCommand.Type("FORCE_MODE_SET_GAIN_SCALING", RTDE_MODULEJNI.RTDE_RobotCommand_FORCE_MODE_SET_GAIN_SCALING_get());
      public final static RTDE.RobotCommand.Type SET_SPEED_SLIDER = new RTDE.RobotCommand.Type("SET_SPEED_SLIDER", RTDE_MODULEJNI.RTDE_RobotCommand_SET_SPEED_SLIDER_get());
      public final static RTDE.RobotCommand.Type SET_STD_ANALOG_OUT = new RTDE.RobotCommand.Type("SET_STD_ANALOG_OUT", RTDE_MODULEJNI.RTDE_RobotCommand_SET_STD_ANALOG_OUT_get());
      public final static RTDE.RobotCommand.Type SERVOL = new RTDE.RobotCommand.Type("SERVOL", RTDE_MODULEJNI.RTDE_RobotCommand_SERVOL_get());
      public final static RTDE.RobotCommand.Type TOOL_CONTACT = new RTDE.RobotCommand.Type("TOOL_CONTACT", RTDE_MODULEJNI.RTDE_RobotCommand_TOOL_CONTACT_get());
      public final static RTDE.RobotCommand.Type GET_STEPTIME = new RTDE.RobotCommand.Type("GET_STEPTIME", RTDE_MODULEJNI.RTDE_RobotCommand_GET_STEPTIME_get());
      public final static RTDE.RobotCommand.Type GET_ACTUAL_JOINT_POSITIONS_HISTORY = new RTDE.RobotCommand.Type("GET_ACTUAL_JOINT_POSITIONS_HISTORY", RTDE_MODULEJNI.RTDE_RobotCommand_GET_ACTUAL_JOINT_POSITIONS_HISTORY_get());
      public final static RTDE.RobotCommand.Type GET_TARGET_WAYPOINT = new RTDE.RobotCommand.Type("GET_TARGET_WAYPOINT", RTDE_MODULEJNI.RTDE_RobotCommand_GET_TARGET_WAYPOINT_get());
      public final static RTDE.RobotCommand.Type SET_TCP = new RTDE.RobotCommand.Type("SET_TCP", RTDE_MODULEJNI.RTDE_RobotCommand_SET_TCP_get());
      public final static RTDE.RobotCommand.Type GET_INVERSE_KINEMATICS = new RTDE.RobotCommand.Type("GET_INVERSE_KINEMATICS", RTDE_MODULEJNI.RTDE_RobotCommand_GET_INVERSE_KINEMATICS_get());
      public final static RTDE.RobotCommand.Type PROTECTIVE_STOP = new RTDE.RobotCommand.Type("PROTECTIVE_STOP", RTDE_MODULEJNI.RTDE_RobotCommand_PROTECTIVE_STOP_get());
      public final static RTDE.RobotCommand.Type MOVEP = new RTDE.RobotCommand.Type("MOVEP", RTDE_MODULEJNI.RTDE_RobotCommand_MOVEP_get());
      public final static RTDE.RobotCommand.Type STOPL = new RTDE.RobotCommand.Type("STOPL", RTDE_MODULEJNI.RTDE_RobotCommand_STOPL_get());
      public final static RTDE.RobotCommand.Type STOPJ = new RTDE.RobotCommand.Type("STOPJ", RTDE_MODULEJNI.RTDE_RobotCommand_STOPJ_get());
      public final static RTDE.RobotCommand.Type SET_WATCHDOG = new RTDE.RobotCommand.Type("SET_WATCHDOG", RTDE_MODULEJNI.RTDE_RobotCommand_SET_WATCHDOG_get());
      public final static RTDE.RobotCommand.Type IS_POSE_WITHIN_SAFETY_LIMITS = new RTDE.RobotCommand.Type("IS_POSE_WITHIN_SAFETY_LIMITS", RTDE_MODULEJNI.RTDE_RobotCommand_IS_POSE_WITHIN_SAFETY_LIMITS_get());
      public final static RTDE.RobotCommand.Type IS_JOINTS_WITHIN_SAFETY_LIMITS = new RTDE.RobotCommand.Type("IS_JOINTS_WITHIN_SAFETY_LIMITS", RTDE_MODULEJNI.RTDE_RobotCommand_IS_JOINTS_WITHIN_SAFETY_LIMITS_get());
      public final static RTDE.RobotCommand.Type GET_JOINT_TORQUES = new RTDE.RobotCommand.Type("GET_JOINT_TORQUES", RTDE_MODULEJNI.RTDE_RobotCommand_GET_JOINT_TORQUES_get());
      public final static RTDE.RobotCommand.Type POSE_TRANS = new RTDE.RobotCommand.Type("POSE_TRANS", RTDE_MODULEJNI.RTDE_RobotCommand_POSE_TRANS_get());
      public final static RTDE.RobotCommand.Type STOP_SCRIPT = new RTDE.RobotCommand.Type("STOP_SCRIPT", RTDE_MODULEJNI.RTDE_RobotCommand_STOP_SCRIPT_get());
  
      public final int swigValue() {
        return swigValue;
      }
  
      public String toString() {
        return swigName;
      }
  
      public static Type swigToEnum(int swigValue) {
        if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
          return swigValues[swigValue];
        for (int i = 0; i < swigValues.length; i++)
          if (swigValues[i].swigValue == swigValue)
            return swigValues[i];
        throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
      }
  
      private Type(String swigName) {
        this.swigName = swigName;
        this.swigValue = swigNext++;
      }
  
      private Type(String swigName, int swigValue) {
        this.swigName = swigName;
        this.swigValue = swigValue;
        swigNext = swigValue+1;
      }
  
      private Type(String swigName, Type swigEnum) {
        this.swigName = swigName;
        this.swigValue = swigEnum.swigValue;
        swigNext = this.swigValue+1;
      }
  
      private static Type[] swigValues = { NO_CMD, MOVEJ, MOVEJ_IK, MOVEL, MOVEL_FK, MOVEC, FORCE_MODE, FORCE_MODE_STOP, ZERO_FT_SENSOR, SPEEDJ, SPEEDL, SERVOJ, SERVOC, SET_STD_DIGITAL_OUT, SET_TOOL_DIGITAL_OUT, SPEED_STOP, SERVO_STOP, SET_PAYLOAD, TEACH_MODE, END_TEACH_MODE, FORCE_MODE_SET_DAMPING, FORCE_MODE_SET_GAIN_SCALING, SET_SPEED_SLIDER, SET_STD_ANALOG_OUT, SERVOL, TOOL_CONTACT, GET_STEPTIME, GET_ACTUAL_JOINT_POSITIONS_HISTORY, GET_TARGET_WAYPOINT, SET_TCP, GET_INVERSE_KINEMATICS, PROTECTIVE_STOP, MOVEP, STOPL, STOPJ, SET_WATCHDOG, IS_POSE_WITHIN_SAFETY_LIMITS, IS_JOINTS_WITHIN_SAFETY_LIMITS, GET_JOINT_TORQUES, POSE_TRANS, STOP_SCRIPT };
      private static int swigNext = 0;
      private final int swigValue;
      private final String swigName;
    }
  
    public final static class Recipe {
      public final static RTDE.RobotCommand.Recipe RECIPE_1 = new RTDE.RobotCommand.Recipe("RECIPE_1", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_1_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_2 = new RTDE.RobotCommand.Recipe("RECIPE_2", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_2_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_3 = new RTDE.RobotCommand.Recipe("RECIPE_3", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_3_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_4 = new RTDE.RobotCommand.Recipe("RECIPE_4", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_4_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_5 = new RTDE.RobotCommand.Recipe("RECIPE_5", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_5_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_6 = new RTDE.RobotCommand.Recipe("RECIPE_6", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_6_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_7 = new RTDE.RobotCommand.Recipe("RECIPE_7", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_7_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_8 = new RTDE.RobotCommand.Recipe("RECIPE_8", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_8_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_9 = new RTDE.RobotCommand.Recipe("RECIPE_9", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_9_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_10 = new RTDE.RobotCommand.Recipe("RECIPE_10", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_10_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_11 = new RTDE.RobotCommand.Recipe("RECIPE_11", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_11_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_12 = new RTDE.RobotCommand.Recipe("RECIPE_12", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_12_get());
      public final static RTDE.RobotCommand.Recipe RECIPE_13 = new RTDE.RobotCommand.Recipe("RECIPE_13", RTDE_MODULEJNI.RTDE_RobotCommand_RECIPE_13_get());
  
      public final int swigValue() {
        return swigValue;
      }
  
      public String toString() {
        return swigName;
      }
  
      public static Recipe swigToEnum(int swigValue) {
        if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
          return swigValues[swigValue];
        for (int i = 0; i < swigValues.length; i++)
          if (swigValues[i].swigValue == swigValue)
            return swigValues[i];
        throw new IllegalArgumentException("No enum " + Recipe.class + " with value " + swigValue);
      }
  
      private Recipe(String swigName) {
        this.swigName = swigName;
        this.swigValue = swigNext++;
      }
  
      private Recipe(String swigName, int swigValue) {
        this.swigName = swigName;
        this.swigValue = swigValue;
        swigNext = swigValue+1;
      }
  
      private Recipe(String swigName, Recipe swigEnum) {
        this.swigName = swigName;
        this.swigValue = swigEnum.swigValue;
        swigNext = this.swigValue+1;
      }
  
      private static Recipe[] swigValues = { RECIPE_1, RECIPE_2, RECIPE_3, RECIPE_4, RECIPE_5, RECIPE_6, RECIPE_7, RECIPE_8, RECIPE_9, RECIPE_10, RECIPE_11, RECIPE_12, RECIPE_13 };
      private static int swigNext = 0;
      private final int swigValue;
      private final String swigName;
    }
  
  }

  public void connect() {
    RTDE_MODULEJNI.RTDE_connect(swigCPtr, this);
  }

  public void disconnect() {
    RTDE_MODULEJNI.RTDE_disconnect(swigCPtr, this);
  }

  public boolean isConnected() {
    return RTDE_MODULEJNI.RTDE_isConnected(swigCPtr, this);
  }

  public boolean isStarted() {
    return RTDE_MODULEJNI.RTDE_isStarted(swigCPtr, this);
  }

  public boolean negotiateProtocolVersion() {
    return RTDE_MODULEJNI.RTDE_negotiateProtocolVersion(swigCPtr, this);
  }

  public SWIGTYPE_p_std__tupleT_unsigned_int_unsigned_int_unsigned_int_unsigned_int_t getControllerVersion() {
    return new SWIGTYPE_p_std__tupleT_unsigned_int_unsigned_int_unsigned_int_unsigned_int_t(RTDE_MODULEJNI.RTDE_getControllerVersion(swigCPtr, this), true);
  }

  public void receive() {
    RTDE_MODULEJNI.RTDE_receive(swigCPtr, this);
  }

  public void receiveData(SharedPtr robot_state) {
    RTDE_MODULEJNI.RTDE_receiveData(swigCPtr, this, SharedPtr.getCPtr(robot_state), robot_state);
  }

  public void send(RTDE.RobotCommand robot_cmd) {
    RTDE_MODULEJNI.RTDE_send(swigCPtr, this, RTDE.RobotCommand.getCPtr(robot_cmd), robot_cmd);
  }

  public void sendAll(short command, String payload) {
    RTDE_MODULEJNI.RTDE_sendAll__SWIG_0(swigCPtr, this, command, payload);
  }

  public void sendAll(short command) {
    RTDE_MODULEJNI.RTDE_sendAll__SWIG_1(swigCPtr, this, command);
  }

  public void sendStart() {
    RTDE_MODULEJNI.RTDE_sendStart(swigCPtr, this);
  }

  public void sendPause() {
    RTDE_MODULEJNI.RTDE_sendPause(swigCPtr, this);
  }

  public boolean sendOutputSetup(VectorString output_names, double frequency) {
    return RTDE_MODULEJNI.RTDE_sendOutputSetup(swigCPtr, this, VectorString.getCPtr(output_names), output_names, frequency);
  }

  public boolean sendInputSetup(VectorString input_names) {
    return RTDE_MODULEJNI.RTDE_sendInputSetup(swigCPtr, this, VectorString.getCPtr(input_names), input_names);
  }

  public final static class RTDECommand {
    public final static RTDE.RTDECommand RTDE_REQUEST_PROTOCOL_VERSION = new RTDE.RTDECommand("RTDE_REQUEST_PROTOCOL_VERSION", RTDE_MODULEJNI.RTDE_RTDE_REQUEST_PROTOCOL_VERSION_get());
    public final static RTDE.RTDECommand RTDE_GET_URCONTROL_VERSION = new RTDE.RTDECommand("RTDE_GET_URCONTROL_VERSION", RTDE_MODULEJNI.RTDE_RTDE_GET_URCONTROL_VERSION_get());
    public final static RTDE.RTDECommand RTDE_TEXT_MESSAGE = new RTDE.RTDECommand("RTDE_TEXT_MESSAGE", RTDE_MODULEJNI.RTDE_RTDE_TEXT_MESSAGE_get());
    public final static RTDE.RTDECommand RTDE_DATA_PACKAGE = new RTDE.RTDECommand("RTDE_DATA_PACKAGE", RTDE_MODULEJNI.RTDE_RTDE_DATA_PACKAGE_get());
    public final static RTDE.RTDECommand RTDE_CONTROL_PACKAGE_SETUP_OUTPUTS = new RTDE.RTDECommand("RTDE_CONTROL_PACKAGE_SETUP_OUTPUTS", RTDE_MODULEJNI.RTDE_RTDE_CONTROL_PACKAGE_SETUP_OUTPUTS_get());
    public final static RTDE.RTDECommand RTDE_CONTROL_PACKAGE_SETUP_INPUTS = new RTDE.RTDECommand("RTDE_CONTROL_PACKAGE_SETUP_INPUTS", RTDE_MODULEJNI.RTDE_RTDE_CONTROL_PACKAGE_SETUP_INPUTS_get());
    public final static RTDE.RTDECommand RTDE_CONTROL_PACKAGE_START = new RTDE.RTDECommand("RTDE_CONTROL_PACKAGE_START", RTDE_MODULEJNI.RTDE_RTDE_CONTROL_PACKAGE_START_get());
    public final static RTDE.RTDECommand RTDE_CONTROL_PACKAGE_PAUSE = new RTDE.RTDECommand("RTDE_CONTROL_PACKAGE_PAUSE", RTDE_MODULEJNI.RTDE_RTDE_CONTROL_PACKAGE_PAUSE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static RTDECommand swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + RTDECommand.class + " with value " + swigValue);
    }

    private RTDECommand(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private RTDECommand(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private RTDECommand(String swigName, RTDECommand swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static RTDECommand[] swigValues = { RTDE_REQUEST_PROTOCOL_VERSION, RTDE_GET_URCONTROL_VERSION, RTDE_TEXT_MESSAGE, RTDE_DATA_PACKAGE, RTDE_CONTROL_PACKAGE_SETUP_OUTPUTS, RTDE_CONTROL_PACKAGE_SETUP_INPUTS, RTDE_CONTROL_PACKAGE_START, RTDE_CONTROL_PACKAGE_PAUSE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ConnectionState {
    public final static RTDE.ConnectionState DISCONNECTED = new RTDE.ConnectionState("DISCONNECTED", RTDE_MODULEJNI.RTDE_ConnectionState_DISCONNECTED_get());
    public final static RTDE.ConnectionState CONNECTED = new RTDE.ConnectionState("CONNECTED", RTDE_MODULEJNI.RTDE_ConnectionState_CONNECTED_get());
    public final static RTDE.ConnectionState STARTED = new RTDE.ConnectionState("STARTED", RTDE_MODULEJNI.RTDE_ConnectionState_STARTED_get());
    public final static RTDE.ConnectionState PAUSED = new RTDE.ConnectionState("PAUSED", RTDE_MODULEJNI.RTDE_ConnectionState_PAUSED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ConnectionState swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ConnectionState.class + " with value " + swigValue);
    }

    private ConnectionState(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ConnectionState(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ConnectionState(String swigName, ConnectionState swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ConnectionState[] swigValues = { DISCONNECTED, CONNECTED, STARTED, PAUSED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
